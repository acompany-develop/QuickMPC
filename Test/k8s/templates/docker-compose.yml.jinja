version: "3.3"
services:
{%- for index in range(party_num) %}
  dep-cc{{ index + 1 }}:
    tty: true # docker run -t
    container_name: computation_container{{ index + 1 }}
    expose:
      - "50020"
      - "51020"
      - "50010"
    build:
      context: {{ docker_context }}
      dockerfile: src/ComputationContainer/Dockerfile
      target: dep-runner
    image: ghcr.io/acompany-develop/computation-container-k8s{{ docker_image_tag }}
    env_file:
      - {{ envs[index|string].config['computation-container']['.env'].__path__ }}
    networks:
      shared-network:
        ipv4_address: 10.0.{{ index + 1 }}.20
    depends_on:
      - dep-dbgate{{ index + 1 }}
      - dep-bts
    command: ["/bin/bash", "-c", "printenv && bazel-bin/computation_container"]
    healthcheck:
      test:
        - CMD
        - /bin/sh
        - -c
        - |-
          /bin/grpc_health_probe -addr=:50010 &&
          /bin/grpc_health_probe -addr=:50020 &&
          /bin/grpc_health_probe -addr=:51020
      interval: 3s
      timeout: 5s
    labels:
      kompose.image-pull-secret: registry-credential

  dep-dbgate{{ index + 1 }}:
    container_name: dbgate_container{{ index + 1 }}
    tty: true # 起動しっぱなし
    expose:
      - "50000"
    build:
      context: {{ docker_context }}
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: dep-runner
      args:
        - lowercase_DB_NAMES=sharedb
    image: ghcr.io/acompany-develop/dbgate-k8s{{ docker_image_tag }}
    env_file:
      - {{ envs[index|string].config['db-container']['dbgate']['.env'].__path__ }}
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.{{ index + 1 }}.30
    command: ["/bin/bash", "-lc", "printenv && ./DbGate"]
    depends_on:
      - dep-sharedb{{ index + 1 }}
    healthcheck:
      test:
        - CMD
        - /bin/grpc_health_probe
        - -addr=:50000
      interval: 3s
      timeout: 5s
    labels:
      kompose.image-pull-secret: registry-credential

  dep-sharedb{{ index + 1 }}:
    container_name: sharedb_container{{ index + 1 }}
    build:
      context: {{ docker_context }}
      dockerfile: src/DbContainer/Db/Dockerfile
      target: dep
      args:
        - lowercase_DB_NAME=sharedb
    image: ghcr.io/acompany-develop/sharedb-k8s{{ docker_image_tag }}
    volumes:
      - type: volume
        source: sharedb{{ index + 1 }}
        target: /opt/couchbase/var
      - type: volume
        source: sharedb{{ index + 1 }}-initialized
        target: /nodestatus
    ports:
      - "0.0.0.0:{{ 60031 + index * 1000 }}:8091"
    expose:
      - 8091
      - 8092
      - 8093
      - 8094
      - 11210
    env_file:
      - {{ envs[index|string].config['db-container']['db']['sharedb']['.env'].__path__ }}
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.{{ index + 1 }}.31
    depends_on:
      - dep-secrets-server
    labels:
      kompose.image-pull-secret: registry-credential
      kompose.volume.type: "persistentVolumeClaim"

  dep-mc{{ index + 1 }}:
    container_name: manage_container{{ index + 1 }}
    tty: true # 起動しっぱなし
    build:
      context: {{ docker_context }}
      dockerfile: src/ManageContainer/Dockerfile
      target: dep-runner
    image: ghcr.io/acompany-develop/manage-container-k8s{{ docker_image_tag }}
    env_file:
      - {{ envs[index|string].config['manage-container']['.env'].__path__ }}
    expose:
      - "50010"
      - "50020"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.{{ index + 1 }}.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    healthcheck:
      test:
        - CMD
        - /bin/sh
        - -c
        - |-
          /bin/grpc_health_probe -addr=:50010 &&
          /bin/grpc_health_probe -addr=:50011 &&
          /bin/grpc_health_probe -addr=:50020
      interval: 3s
      timeout: 5s
    depends_on:
      - dep-mc-envoy{{ index + 1 }}
      - dep-cc{{ index + 1 }}
    labels:
      kompose.image-pull-secret: registry-credential

  dep-mc-envoy{{ index + 1 }}:
    container_name: manage_envoy_container{{ index + 1 }}
    tty: true # 起動しっぱなし
    image: envoyproxy/envoy:v1.17.1
    volumes:
      - type: bind
        source: {{ envs[index|string].config['manage-container']['envoy.yaml'].__path__ }}
        target: /etc/envoy/envoy.yaml
    expose:
      - "15000"
    ports:
      - "0.0.0.0:{{ index + 9001 }}:9000"
    networks:
      shared-network:
        ipv4_address: 10.0.{{ index + 1 }}.11
    command: ["/bin/sh", "-c", "/usr/local/bin/envoy -c /etc/envoy/envoy.yaml"]
    labels:
      kompose.service.type: "nodeport"
{%- endfor %}

  dep-bts:
    container_name: beaver_triple_service
    # TODO: BTS の dep イメージを push する
    image: ghcr.io/acompany-develop/bts_dev:s20220427
    environment:
      - STAGE=dev
    volumes:
      - type: bind
        source: ../config/common/beaver-triple-service
        target: /QuickMPC-BTS/Config
    ports: # TODO: IP/PORT衝突回避リファクタ時に`127.0.0.1:64101:54000`に変える
      - "0.0.0.0:60020:50020"
    networks:
      default: {}
      shared-network:
        # INFO: SSLサーバ証明書発行の際にCNやsubjectAltNameで指定したDNS名でlocalloopbackできるようにする
        aliases:
          - beaver_triple_service
        ipv4_address: 10.0.1.40
    command: ["/bin/bash", "-c", "./BeaverTripleService"]
    healthcheck:
      test:
        - CMD
        - /bin/grpc_health_probe
        - -addr=:50020
      interval: 3s
      timeout: 5s
    labels:
      kompose.image-pull-secret: registry-credential

  dep-secrets-server:
    container_name: secrets-server
    tty: true
    build:
      context: {{ docker_context }}
      dockerfile: src/DbContainer/secrets-server.Dockerfile
      target: dep-runner
      args:
        - lowercase_DB_NAMES=sharedb
    image: ghcr.io/acompany-develop/secrets-server-k8s{{ docker_image_tag }}
    expose:
      - "8000"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.32
    labels:
      kompose.image-pull-secret: registry-credential

volumes:
{%- for index in range(party_num) %}
  sharedb{{ index + 1 }}:
  sharedb{{ index + 1 }}-initialized:
{%- endfor %}
networks:
  shared-network:
    external: true
