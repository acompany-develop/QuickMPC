version: "3.3"
services:
  dev_cc1:
    tty: true
    container_name: computation_container1
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute1
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute1/.env
    networks:
      shared-network:
        ipv4_address: 10.0.1.20
    depends_on:
      dev_dbgate1:
        condition: service_healthy
      dev_bts:
        condition: service_healthy
    command: ["/bin/bash", "-c", "printenv && bazel-bin/computation_container"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=computation_container1:50010 &&
          /bin/grpc_health_probe -addr=computation_container1:51020
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_cc2:
    tty: true # docker run -t
    container_name: computation_container2
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute2
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute2/.env
    networks:
      shared-network:
        ipv4_address: 10.0.2.20
    depends_on:
      dev_dbgate2:
        condition: service_healthy
    command: ["/bin/bash", "-c", "printenv && bazel-bin/computation_container"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=computation_container2:50010 &&
          /bin/grpc_health_probe -addr=computation_container2:51020
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_cc3:
    tty: true
    container_name: computation_container3
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute3
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute3/.env
    networks:
      shared-network:
        ipv4_address: 10.0.3.20
    depends_on:
      dev_dbgate3:
        condition: service_healthy
    command: ["/bin/bash", "-c", "printenv && bazel-bin/computation_container"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=computation_container3:50010 &&
          /bin/grpc_health_probe -addr=computation_container3:51020
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_bts:
    container_name: beaver_triple_service
    image: ghcr.io/acompany-develop/quickmpc-bts:s20220808
    environment:
      - STAGE=dev
    volumes:
      - type: bind
        source: ../Config/BeaverTripleService
        target: /QuickMPC-BTS/Config
    ports:
      - "0.0.0.0:60020:50020"
    networks:
      default: {}
      shared-network:
        aliases:
          - beaver_triple_service
        ipv4_address: 10.0.1.40
    command: ["/bin/bash", "-c", "./BeaverTripleService"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=beaver_triple_service:50020",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_dbgate1:
    container_name: dbgate_container1
    tty: true # 起動しっぱなし
    expose:
      - "50000"
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAMES=sharedb
    volumes:
      - type: bind
        source: ../Config/DbContainer/DbGate1
        target: /QuickMPC/Config
    env_file:
      - ../Config/DbContainer/DbGate1/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.30
    command: ["/bin/bash", "-lc", "printenv && ./DbGate"]
    depends_on:
      dev_sharedb1:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "/bin/grpc_health_probe -addr=dbgate_container1:50000"]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_sharedb1:
    container_name: sharedb_container1
    build:
      context: ../
      dockerfile: src/DbContainer/Db/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAME=sharedb
    volumes:
      - type: volume
        source: sharedb1
        target: /opt/couchbase/var
      - type: volume
        source: sharedb1-initialized
        target: /nodestatus
    ports:
      - "0.0.0.0:60031:8091"
    expose:
      - "8091-8094"
    env_file:
      - ../Config/DbContainer/Db/sharedb/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.31
    depends_on:
      dev_secrets-server:
        condition: service_healthy

  dev_dbgate2:
    container_name: dbgate_container2
    tty: true # 起動しっぱなし
    expose:
      - "50000"
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAMES=sharedb
    volumes:
      - type: bind
        source: ../Config/DbContainer/DbGate2
        target: /QuickMPC/Config
    env_file:
      - ../Config/DbContainer/DbGate2/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.2.30
    command: ["/bin/bash", "-lc", "printenv && ./DbGate"]
    depends_on:
      dev_sharedb2:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "/bin/grpc_health_probe -addr=dbgate_container2:50000"]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_sharedb2:
    container_name: sharedb_container2
    build:
      context: ../
      dockerfile: src/DbContainer/Db/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAME=sharedb
    volumes:
      - type: volume
        source: sharedb2
        target: /opt/couchbase/var
      - type: volume
        source: sharedb2-initialized
        target: /nodestatus
    ports:
      - "0.0.0.0:61031:8091"
    expose:
      - "8091-8094"
    env_file:
      - ../Config/DbContainer/Db/sharedb/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.2.31
    depends_on:
      dev_secrets-server:
        condition: service_healthy

  dev_dbgate3:
    container_name: dbgate_container3
    tty: true # 起動しっぱなし
    expose:
      - "50000"
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAMES=sharedb
    volumes:
      - type: bind
        source: ../Config/DbContainer/DbGate3
        target: /QuickMPC/Config
    env_file:
      - ../Config/DbContainer/DbGate3/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.3.30
    command: ["/bin/bash", "-lc", "printenv && ./DbGate"]
    depends_on:
      dev_sharedb3:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "/bin/grpc_health_probe -addr=dbgate_container3:50000"]
      interval: 3s
      timeout: 5s
      start_period: 5s

  dev_sharedb3:
    container_name: sharedb_container3
    build:
      context: ../
      dockerfile: src/DbContainer/Db/Dockerfile
      target: dev
      args:
        - lowercase_DB_NAME=sharedb
    volumes:
      - type: volume
        source: sharedb3
        target: /opt/couchbase/var
      - type: volume
        source: sharedb3-initialized
        target: /nodestatus
    ports:
      - "0.0.0.0:62031:8091"
    expose:
      - "8091-8094"
    env_file:
      - ../Config/DbContainer/Db/sharedb/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.3.31
    depends_on:
      dev_secrets-server:
        condition: service_healthy

  dev_secrets-server:
    container_name: secrets-server
    tty: true
    build:
      context: ../
      dockerfile: src/DbContainer/secrets-server.Dockerfile
      target: dev
      args:
        - lowercase_DB_NAMES=sharedb
    expose:
      - "80"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.32

  src_cc:
    container_name: computation_container1
    tty: true # 起動しっぱなし
    expose:
      - "50120"
      - "50110"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: src
    volumes:
      - type: bind
        source: ../src/ComputationContainer
        target: /QuickMPC
      - type: bind
        source: ../src/ComputationContainer/.cache
        target: /root/.cache
      - type: bind
        source: ../src/Proto
        target: /Proto
      - type: bind
        source: ../Config/ComputationContainer/Compute1
        target: /QuickMPC/Config
      - type: bind
        source: ../.vscode
        target: /QuickMPC/.vscode
    env_file:
      - ../Config/ComputationContainer/Compute1/.src.env
    networks:
      shared-network:
        ipv4_address: 10.0.1.120

  src_dbgate:
    container_name: dbgate_container1
    tty: true # 起動しっぱなし
    expose:
      - "50000"
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: src
      args:
        - lowercase_DB_NAMES=sharedb
    volumes:
      - type: bind
        source: ./../src/DbContainer/DbGate
        target: /QuickMPC
      - type: bind
        source: ./../Config/DbContainer/DbGate1
        target: /QuickMPC/Config
      - type: bind
        source: ./../src/Proto
        target: /Proto
      # 開発環境のフォーマッタを統一
      - type: bind
        source: ./../.vscode
        target: /QuickMPC/.vscode
    env_file:
      - ../Config/DbContainer/DbGate1/.src.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.130
    depends_on:
      src_sharedb:
        condition: service_started

  src_sharedb:
    container_name: sharedb_container1
    build:
      context: ../
      dockerfile: src/DbContainer/Db/Dockerfile
      target: src
      args:
        - lowercase_DB_NAME=sharedb
    volumes:
      - type: bind
        source: ./../src/DbContainer/Db/shareDb/data
        target: /opt/couchbase/var
      - type: bind
        source: ./../src/DbContainer/Db/shareDb/nodestatus
        target: /nodestatus
    expose:
      - "8091-8094"
    ports:
      - "0.0.0.0:60131:8091"
    env_file:
      - ../Config/DbContainer/Db/sharedb/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.131
    depends_on:
      src_secrets-server:
        condition: service_healthy

  src_secrets-server:
    container_name: secrets-server
    tty: true
    expose:
      - "80"
    build:
      context: ../
      dockerfile: src/DbContainer/secrets-server.Dockerfile
      target: src
      args:
        - lowercase_DB_NAMES=sharedb
    networks:
      shared-network:
        ipv4_address: 10.0.1.132

  src_mc:
    container_name: manage_container1
    tty: true # 起動しっぱなし
    expose:
      - "50110"
      - "50111"
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: src
    volumes:
      - type: bind
        source: ../src/ManageContainer
        target: /QuickMPC
      - type: bind
        source: ../src/Proto
        target: /Proto
      - type: bind
        source: ../Config/ManageContainer/Manage1
        target: /QuickMPC/Config
      # 開発環境のフォーマッタを統一
      - type: bind
        source: ../.vscode
        target: /QuickMPC/.vscode
    env_file:
      - ../Config/ManageContainer/Manage1/.src.env
    networks:
      shared-network:
        ipv4_address: 10.0.1.110

  src_mc_envoy:
    container_name: manage_envoy_container1
    tty: true # 起動しっぱなし
    image: envoyproxy/envoy:v1.17.1
    volumes:
      - type: bind
        source: ./../src/ManageContainer/envoy.yaml
        target: /etc/envoy/envoy.yaml
    expose:
      - "15000"
    ports:
      - "0.0.0.0:9001:9001"
    networks:
      shared-network:
        ipv4_address: 10.0.1.111
    command: ["/bin/sh", "-c", "/usr/local/bin/envoy -c /etc/envoy/envoy.yaml"]

  dev_mc1:
    container_name: manage_container1
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage1
        target: /QuickMPC/Config
      # 開発環境のフォーマッタを統一
      - type: bind
        source: ../.vscode
        target: /QuickMPC/.vscode
      - type: volume
        source: sharedb1_tmp
        target: /Db/share
      - type: volume
        source: resultdb1_tmp
        target: /Db/result
    env_file:
      - ../Config/ManageContainer/Manage1/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.1.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=manage_container1:50010 &&
          /bin/grpc_health_probe -addr=manage_container1:50011
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s
    depends_on:
      dev_mc_envoy1:
        condition: service_started
      dev_cc1:
        condition: service_started

  dev_mc_envoy1:
    container_name: manage_envoy_container1
    tty: true # 起動しっぱなし
    image: envoyproxy/envoy:v1.17.1
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage1/envoy.yaml
        target: /etc/envoy/envoy.yaml
    expose:
      - "15000"
    ports:
      - "0.0.0.0:9001:9000"
    networks:
      shared-network:
        ipv4_address: 10.0.1.11
    command: ["/bin/sh", "-c", "/usr/local/bin/envoy -c /etc/envoy/envoy.yaml"]

  dev_mc2:
    container_name: manage_container2
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage2
        target: /QuickMPC/Config
      - type: volume
        source: sharedb2_tmp
        target: /Db/share
      - type: volume
        source: resultdb2_tmp
        target: /Db/result
    env_file:
      - ../Config/ManageContainer/Manage2/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.2.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=manage_container2:50010 &&
          /bin/grpc_health_probe -addr=manage_container2:50011
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s
    depends_on:
      dev_mc_envoy2:
        condition: service_started
      dev_cc2:
        condition: service_started

  dev_mc_envoy2:
    container_name: manage_envoy_container2
    tty: true # 起動しっぱなし
    image: envoyproxy/envoy:v1.17.1
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage2/envoy.yaml
        target: /etc/envoy/envoy.yaml
    expose:
      - "15000"
    ports:
      - "0.0.0.0:9002:9000"
    networks:
      shared-network:
        ipv4_address: 10.0.2.11
    command: ["/bin/sh", "-c", "/usr/local/bin/envoy -c /etc/envoy/envoy.yaml"]

  dev_mc3:
    container_name: manage_container3
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage3
        target: /QuickMPC/Config
      - type: volume
        source: sharedb3_tmp
        target: /Db/share
      - type: volume
        source: resultdb3_tmp
        target: /Db/result
    env_file:
      - ../Config/ManageContainer/Manage3/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.3.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    healthcheck:
      test: [
          "CMD-SHELL",
          "/bin/grpc_health_probe -addr=manage_container3:50010 &&
          /bin/grpc_health_probe -addr=manage_container3:50011
          ",
        ]
      interval: 3s
      timeout: 5s
      start_period: 5s
    depends_on:
      dev_mc_envoy3:
        condition: service_started
      dev_cc3:
        condition: service_started

  dev_mc_envoy3:
    container_name: manage_envoy_container3
    tty: true # 起動しっぱなし
    image: envoyproxy/envoy:v1.17.1
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage3/envoy.yaml
        target: /etc/envoy/envoy.yaml
    expose:
      - "15000"
    ports:
      - "0.0.0.0:9003:9000"
    networks:
      shared-network:
        ipv4_address: 10.0.3.11
    command: ["/bin/sh", "-c", "/usr/local/bin/envoy -c /etc/envoy/envoy.yaml"]

  small_cc:
    container_name: computation_container1
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: small

  small_dbgate:
    container_name: dbgate_container1
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: small
      args:
        - lowercase_DB_NAMES=sharedb
    env_file:
      - ../Config/DbContainer/DbGate1/.env
    expose:
      - "50000"
    depends_on:
      small_sharedb:
        condition: service_started

  small_sharedb:
    container_name: sharedb_container
    build:
      context: ../
      dockerfile: src/DbContainer/Db/Dockerfile
      target: small
      args:
        - lowercase_DB_NAME=sharedb
    env_file:
      - ../Config/DbContainer/Db/sharedb/.env
    expose:
      - "8091-8094"
    ports:
      - "0.0.0.0:60131:8091"
    depends_on:
      small_secrets-server:
        condition: service_healthy

  small_secrets-server:
    container_name: secrets-server
    tty: true
    build:
      context: ../
      dockerfile: src/DbContainer/secrets-server.Dockerfile
      args:
        - lowercase_DB_NAMES=sharedb

  small_mc:
    container_name: manage_container1
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: small
    volumes:
      - type: volume
        source: sharedb1_tmp
        target: /Db/share
      - type: volume
        source: resultdb1_tmp
        target: /Db/result
    env_file:
      - ../Config/ManageContainer/Manage1/.env

  medium_cc1:
    container_name: computation_container1
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute1
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute1/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.20
    depends_on:
      dev_dbgate1:
        condition: service_healthy
      dev_bts:
        condition: service_healthy
    command:
      ["/bin/bash", "-c", "printenv && bazel-bin/computation_container_test"]

  medium_cc2:
    container_name: computation_container2
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute2
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute2/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.2.20
    depends_on:
      dev_dbgate2:
        condition: service_healthy
      dev_bts:
        condition: service_healthy
    command:
      ["/bin/bash", "-c", "printenv && bazel-bin/computation_container_test"]

  medium_cc3:
    tty: true # docker run -t
    container_name: computation_container3
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute3
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute3/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.3.20
    depends_on:
      dev_dbgate3:
        condition: service_healthy
      dev_bts:
        condition: service_healthy
    command:
      ["/bin/bash", "-c", "printenv && bazel-bin/computation_container_test"]

  benchmark_cc1:
    container_name: computation_container1
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute1
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute1/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.20
    depends_on:
      dev_bts:
        condition: service_healthy
    command:
      [
        "/bin/bash",
        "-c",
        "printenv && bazel-bin/computation_container_benchmark",
      ]

  benchmark_cc2:
    container_name: computation_container2
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute2
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute2/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.2.20
    depends_on:
      dev_bts:
        condition: service_healthy
    command:
      [
        "/bin/bash",
        "-c",
        "printenv && bazel-bin/computation_container_benchmark",
      ]

  benchmark_cc3:
    tty: true # docker run -t
    container_name: computation_container3
    expose:
      - "51020"
      - "50010"
    build:
      context: ../
      dockerfile: src/ComputationContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ComputationContainer/Compute3
        target: /QuickMPC/Config
    env_file:
      - ../Config/ComputationContainer/Compute3/.env
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.3.20
    depends_on:
      dev_bts:
        condition: service_healthy
    command:
      [
        "/bin/bash",
        "-c",
        "printenv && bazel-bin/computation_container_benchmark",
      ]

  medium_mc1:
    container_name: manage_container1
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage1
        target: /QuickMPC/Config
    env_file:
      - ../Config/ManageContainer/Manage1/.env
    expose:
      - "50010"
      - "50011"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.10
    command:
      # dbが立ち上がりきる前に実行が始まってしまうためspeepしている
      ["/bin/bash", "-c", "printenv && go test ./IntegrationTest/... -v -cover"]
    depends_on:
      dev_dbgate1:
        condition: service_healthy

  medium_mc2:
    container_name: manage_container2
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage2
        target: /QuickMPC/Config
    env_file:
      - ../Config/ManageContainer/Manage2/.env
    expose:
      - "50010"
      - "50011"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.2.10
    command:
      # dbが立ち上がりきる前に実行が始まってしまうためspeepしている
      ["/bin/bash", "-c", "printenv && go test ./IntegrationTest/... -v -cover"]
    depends_on:
      dev_dbgate2:
        condition: service_healthy

  medium_mc3:
    container_name: manage_container3
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage3
        target: /QuickMPC/Config
    env_file:
      - ../Config/ManageContainer/Manage3/.env
    expose:
      - "50010"
      - "50011"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.3.10
    command:
      ["/bin/bash", "-c", "printenv && go test ./IntegrationTest/... -v -cover"]
    depends_on:
      dev_dbgate3:
        condition: service_healthy

  send_share_mc1:
    container_name: manage_container1
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage1
        target: /QuickMPC/Config
      # 開発環境のフォーマッタを統一
      - type: bind
        source: ../.vscode
        target: /QuickMPC/.vscode
    env_file:
      - ../Config/ManageContainer/Manage1/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.1.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    depends_on:
      dev_mc_envoy1:
        condition: service_started
      dev_dbgate1:
        condition: service_started

  send_share_mc2:
    container_name: manage_container2
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage2
        target: /QuickMPC/Config
    env_file:
      - ../Config/ManageContainer/Manage2/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.2.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    depends_on:
      dev_mc_envoy2:
        condition: service_started
      dev_dbgate2:
        condition: service_started

  send_share_mc3:
    container_name: manage_container3
    tty: true # 起動しっぱなし
    build:
      context: ../
      dockerfile: src/ManageContainer/Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ../Config/ManageContainer/Manage3
        target: /QuickMPC/Config
    env_file:
      - ../Config/ManageContainer/Manage3/.env
    expose:
      - "50010"
      - "50011"
    networks:
      shared-network:
        ipv4_address: 10.0.3.10
    command: ["/bin/bash", "-c", "printenv && ./ManageContainer"]
    depends_on:
      dev_mc_envoy3:
        condition: service_started
      dev_dbgate3:
        condition: service_started

  medium_dbgate:
    # tty: true
    container_name: dbgate_container1
    build:
      context: ../
      dockerfile: src/DbContainer/DbGate/Dockerfile
      target: medium
      args:
        - lowercase_DB_NAMES=sharedb
    env_file:
      - ../Config/DbContainer/DbGate1/.env
    expose:
      - "50000"
    networks:
      default: {}
      shared-network:
        ipv4_address: 10.0.1.30
    command: ["/bin/bash", "-lc", "printenv && go test ./... -v -cover"]
    depends_on:
      dev_sharedb1:
        condition: service_healthy

  medium-libc:
    container_name: lib_client
    build:
      context: ../
      dockerfile: Test/LibClient/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ./LibClient/Data
        target: /LibClient/Data
      - type: bind
        source: ./LibClient/src
        target: /LibClient/src
    command: ["/bin/bash", "-c", "pipenv run pip list && pipenv run pytest src/tests -s -v -log-cli-level=DEBUG"]
    network_mode: "host"
    depends_on:
      dev_mc1:
        condition: service_healthy
      dev_mc2:
        condition: service_healthy
      dev_mc3:
        condition: service_healthy

  benchmark-libc:
    container_name: lib_client
    build:
      context: ../
      dockerfile: Test/LibClient/Dockerfile
      target: medium
    volumes:
      - type: bind
        source: ./LibClient/Data
        target: /LibClient/Data
      - type: bind
        source: ./LibClient/src
        target: /LibClient/src
    command: ["/bin/bash", "-c", "pipenv run pip list && pipenv run pytest src/benchmark -s -v -log-cli-level=DEBUG"]
    network_mode: "host"
    depends_on:
      dev_mc1:
        condition: service_healthy
      dev_mc2:
        condition: service_healthy
      dev_mc3:
        condition: service_healthy

volumes:
  sharedb1:
  sharedb1-initialized:
  sharedb2:
  sharedb2-initialized:
  sharedb3:
  sharedb3-initialized:
  # TODO: DB削除が完了したら↑のsharedb*を消す
  sharedb1_tmp:
  sharedb2_tmp:
  sharedb3_tmp:
  resultdb1_tmp:
  resultdb2_tmp:
  resultdb3_tmp:
networks:
  shared-network:
    external: true
