// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.0
// source: common_types.proto

package common_types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobStatus int32

const (
	JobStatus_UNKNOWN   JobStatus = 0
	JobStatus_PRE_JOB   JobStatus = 1
	JobStatus_READ_DB   JobStatus = 2
	JobStatus_COMPUTE   JobStatus = 3
	JobStatus_WRITE_DB  JobStatus = 4
	JobStatus_COMPLETED JobStatus = 5
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "PRE_JOB",
		2: "READ_DB",
		3: "COMPUTE",
		4: "WRITE_DB",
		5: "COMPLETED",
	}
	JobStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"PRE_JOB":   1,
		"READ_DB":   2,
		"COMPUTE":   3,
		"WRITE_DB":  4,
		"COMPLETED": 5,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_proto_enumTypes[0].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_common_types_proto_enumTypes[0]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{0}
}

type ComputationMethod int32

const (
	ComputationMethod_COMPUTATION_METHOD_UNSPECIFIED         ComputationMethod = 0
	ComputationMethod_COMPUTATION_METHOD_MEAN                ComputationMethod = 1
	ComputationMethod_COMPUTATION_METHOD_VARIANCE            ComputationMethod = 2
	ComputationMethod_COMPUTATION_METHOD_SUM                 ComputationMethod = 3
	ComputationMethod_COMPUTATION_METHOD_CORREL              ComputationMethod = 4
	ComputationMethod_COMPUTATION_METHOD_LINEAR_REGRESSION   ComputationMethod = 5
	ComputationMethod_COMPUTATION_METHOD_LOGISTIC_REGRESSION ComputationMethod = 6
	ComputationMethod_COMPUTATION_METHOD_MESH_CODE           ComputationMethod = 7
	ComputationMethod_COMPUTATION_METHOD_DECISION_TREE       ComputationMethod = 8
)

// Enum value maps for ComputationMethod.
var (
	ComputationMethod_name = map[int32]string{
		0: "COMPUTATION_METHOD_UNSPECIFIED",
		1: "COMPUTATION_METHOD_MEAN",
		2: "COMPUTATION_METHOD_VARIANCE",
		3: "COMPUTATION_METHOD_SUM",
		4: "COMPUTATION_METHOD_CORREL",
		5: "COMPUTATION_METHOD_LINEAR_REGRESSION",
		6: "COMPUTATION_METHOD_LOGISTIC_REGRESSION",
		7: "COMPUTATION_METHOD_MESH_CODE",
		8: "COMPUTATION_METHOD_DECISION_TREE",
	}
	ComputationMethod_value = map[string]int32{
		"COMPUTATION_METHOD_UNSPECIFIED":         0,
		"COMPUTATION_METHOD_MEAN":                1,
		"COMPUTATION_METHOD_VARIANCE":            2,
		"COMPUTATION_METHOD_SUM":                 3,
		"COMPUTATION_METHOD_CORREL":              4,
		"COMPUTATION_METHOD_LINEAR_REGRESSION":   5,
		"COMPUTATION_METHOD_LOGISTIC_REGRESSION": 6,
		"COMPUTATION_METHOD_MESH_CODE":           7,
		"COMPUTATION_METHOD_DECISION_TREE":       8,
	}
)

func (x ComputationMethod) Enum() *ComputationMethod {
	p := new(ComputationMethod)
	*p = x
	return p
}

func (x ComputationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_proto_enumTypes[1].Descriptor()
}

func (ComputationMethod) Type() protoreflect.EnumType {
	return &file_common_types_proto_enumTypes[1]
}

func (x ComputationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputationMethod.Descriptor instead.
func (ComputationMethod) EnumDescriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{1}
}

type PredictMethod int32

const (
	PredictMethod_PREDICT_METHOD_UNSPECIFIED         PredictMethod = 0
	PredictMethod_PREDICT_METHOD_LINEAR_REGRESSION   PredictMethod = 1
	PredictMethod_PREDICT_METHOD_LOGISTIC_REGRESSION PredictMethod = 2
	PredictMethod_PREDICT_METHOD_DECISION_TREE       PredictMethod = 3
	PredictMethod_PREDICT_METHOD_SID3_TREE           PredictMethod = 4
)

// Enum value maps for PredictMethod.
var (
	PredictMethod_name = map[int32]string{
		0: "PREDICT_METHOD_UNSPECIFIED",
		1: "PREDICT_METHOD_LINEAR_REGRESSION",
		2: "PREDICT_METHOD_LOGISTIC_REGRESSION",
		3: "PREDICT_METHOD_DECISION_TREE",
		4: "PREDICT_METHOD_SID3_TREE",
	}
	PredictMethod_value = map[string]int32{
		"PREDICT_METHOD_UNSPECIFIED":         0,
		"PREDICT_METHOD_LINEAR_REGRESSION":   1,
		"PREDICT_METHOD_LOGISTIC_REGRESSION": 2,
		"PREDICT_METHOD_DECISION_TREE":       3,
		"PREDICT_METHOD_SID3_TREE":           4,
	}
)

func (x PredictMethod) Enum() *PredictMethod {
	p := new(PredictMethod)
	*p = x
	return p
}

func (x PredictMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredictMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_proto_enumTypes[2].Descriptor()
}

func (PredictMethod) Type() protoreflect.EnumType {
	return &file_common_types_proto_enumTypes[2]
}

func (x PredictMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredictMethod.Descriptor instead.
func (PredictMethod) EnumDescriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{2}
}

var File_common_types_proto protoreflect.FileDescriptor

var file_common_types_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x5c, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x42, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x44, 0x42, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0xce, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f,
	0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x45, 0x45, 0x10, 0x08, 0x2a, 0xbd, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f,
	0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x33, 0x5f, 0x54, 0x52,
	0x45, 0x45, 0x10, 0x04, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2d, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x2f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x50, 0x43, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_types_proto_rawDescOnce sync.Once
	file_common_types_proto_rawDescData = file_common_types_proto_rawDesc
)

func file_common_types_proto_rawDescGZIP() []byte {
	file_common_types_proto_rawDescOnce.Do(func() {
		file_common_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_types_proto_rawDescData)
	})
	return file_common_types_proto_rawDescData
}

var file_common_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_types_proto_goTypes = []interface{}{
	(JobStatus)(0),         // 0: pb_common_types.JobStatus
	(ComputationMethod)(0), // 1: pb_common_types.ComputationMethod
	(PredictMethod)(0),     // 2: pb_common_types.PredictMethod
}
var file_common_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_types_proto_init() }
func file_common_types_proto_init() {
	if File_common_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_types_proto_goTypes,
		DependencyIndexes: file_common_types_proto_depIdxs,
		EnumInfos:         file_common_types_proto_enumTypes,
	}.Build()
	File_common_types_proto = out.File
	file_common_types_proto_rawDesc = nil
	file_common_types_proto_goTypes = nil
	file_common_types_proto_depIdxs = nil
}
