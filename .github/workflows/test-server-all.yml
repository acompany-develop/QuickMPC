name: Build and Run Tests on CC, MC, and BTS Containers

on:
  pull_request:
  push:
    branches:
      - main
      - "release/**"

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install clang-format tool
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 14
          sudo apt-get update
          sudo apt-get install clang-format-14
      - name: Check if *.{cpp|hpp} files are formatted
        run: |
          cd ${{ github.workspace }}/packages/server/
          make check

  search_change_file_names:
    runs-on: ubuntu-latest
    needs: [lint]
    outputs:
      change_file_names: ${{ steps.output_step.outputs.file_names}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: get_changed-files
        uses: tj-actions/changed-files@v35

      - name: Output
        id: output_step
        run: echo "file_names=${{ steps.changed-files.outputs.all_changed_files }}" >> "$GITHUB_OUTPUT"

  # small_test_cc:
  #   runs-on: ubuntu-latest
  #   needs: [lint]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # Setup config for using GCS as bazel remote cache
  #     - name: Update GCP service account JSON
  #       run: echo ${CI_REMOTE_CACHE_JSON} | base64 --decode >> ./packages/server/computation_container/sa.json
  #       env:
  #         CI_REMOTE_CACHE_JSON: ${{ secrets.CI_REMOTE_CACHE_JSON }}

  #     - name: Update .bazelrc for using remote cache
  #       run: |
  #         eval "echo \"$(cat ./.github/workflows/.bazelrc_for_ci)\"" >> ./packages/server/computation_container/.bazelrc
  #       env:
  #         BAZEL_CACHE_BUCKET: ${{ secrets.BAZEL_CACHE_BUCKET }}

  #     - name: Build images and run computation_container
  #       run: make test t=./computation_container m=build p=small
  #       working-directory: ./scripts

  #     - name: Run bazel test in computation_container
  #       run: make test t=./computation_container m=run p=small
  #       working-directory: ./scripts

  small_test_mc:
    runs-on: ubuntu-latest
    needs: [lint, search_change_file_names]
    if: contains(${{needs.search_change_file_names.outputs.change_file_names}}, "manage_container")

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build images and run manage_container
        run: make test t=./manage_container m=build p=small
        working-directory: ./scripts

      - name: Run Go test in manage_container
        run: make test t=./manage_container m=run p=small
        working-directory: ./scripts

  # small_test_bts:
  #   runs-on: ubuntu-latest
  #   needs: [lint]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Build beaver_triple_service binary
  #       run: make test t=./beaver_triple_service m=build
  #       working-directory: ./scripts

  #     - name: Run test in beaver_triple_service
  #       run: make test t=./beaver_triple_service m=run
  #       working-directory: ./scripts

  # small_test:
  #   runs-on: ubuntu-latest
  #   needs: [lint, small_test_cc, small_test_mc, small_test_bts]

  #   steps:
  #     - name: Merge All small_test
  #       run: echo "ok"

  # medium_test_cc:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # Setup config for using GCS as bazel remote cache
  #     - name: Update GCP service account JSON
  #       run: echo ${CI_REMOTE_CACHE_JSON} | base64 --decode >> ./packages/server/computation_container/sa.json
  #       env:
  #         CI_REMOTE_CACHE_JSON: ${{ secrets.CI_REMOTE_CACHE_JSON }}

  #     - name: Update .bazelrc for using remote cache
  #       run: |
  #         eval "echo \"$(cat ./.github/workflows/.bazelrc_for_ci)\"" >> ./packages/server/computation_container/.bazelrc
  #       env:
  #         BAZEL_CACHE_BUCKET: ${{ secrets.BAZEL_CACHE_BUCKET }}

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  #     - name: Build images and run computation_container
  #       run: make test t=./computation_container m=build p=medium
  #       working-directory: ./scripts

  #     - name: Run bazel test in computation_container
  #       run: make test t=./computation_container m=run p=medium
  #       working-directory: ./scripts

  # medium_test_mc:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Build images and run manage_container
  #       run: make test t=./manage_container m=build p=medium
  #       working-directory: ./scripts

  #     - name: Run bazel test in manage_container
  #       run: make test t=./manage_container m=run p=medium
  #       working-directory: ./scripts

  # medium_test_libclient:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.CI_REPOSITORY_ACCESS_TOKEN }}
  #         submodules: true

  #     - name: Update GCP service account JSON
  #       run: echo ${CI_REMOTE_CACHE_JSON} | base64 --decode >> ./packages/server/computation_container/sa.json
  #       env:
  #         CI_REMOTE_CACHE_JSON: ${{ secrets.CI_REMOTE_CACHE_JSON }}

  #     - name: Update .bazelrc for using remote cache
  #       run: |
  #         eval "echo \"$(cat ./.github/workflows/.bazelrc_for_ci)\"" >> ./packages/server/computation_container/.bazelrc
  #       env:
  #         BAZEL_CACHE_BUCKET: ${{ secrets.BAZEL_CACHE_BUCKET }}

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  #     - name: Build images and run libclient
  #       run: make test t=./libclient m=build p=medium
  #       working-directory: ./scripts

  #     - name: Run bazel test in libclient
  #       run: make test t=./libclient m=run p=medium
  #       working-directory: ./scripts

  # medium_test_container:
  #   runs-on: ubuntu-latest
  #   needs: [lint]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.CI_REPOSITORY_ACCESS_TOKEN }}
  #         submodules: true

  #     - name: Update GCP service account JSON
  #       run: echo ${CI_REMOTE_CACHE_JSON} | base64 --decode >> ./packages/server/computation_container/sa.json
  #       env:
  #         CI_REMOTE_CACHE_JSON: ${{ secrets.CI_REMOTE_CACHE_JSON }}

  #     - name: Update .bazelrc for using remote cache
  #       run: |
  #         eval "echo \"$(cat ./.github/workflows/.bazelrc_for_ci)\"" >> ./packages/server/computation_container/.bazelrc
  #       env:
  #         BAZEL_CACHE_BUCKET: ${{ secrets.BAZEL_CACHE_BUCKET }}

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7

  #     - name: Build container test images
  #       run: |
  #         pip install pipenv
  #         make test t=./container_test m=build p=medium
  #       working-directory: ./scripts

  #     - name: Run container test
  #       run: make test t=./container_test m=run p=medium
  #       working-directory: ./scripts
  # medium_test:
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       lint,
  #       medium_test_cc,
  #       medium_test_mc,
  #       medium_test_libclient,
  #       medium_test_container,
  #     ]

  #   steps:
  #     - name: Merge All medium_test
  #       run: echo "ok"
