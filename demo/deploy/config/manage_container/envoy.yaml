admin:  # 管理者画面の設定
  access_log_path: /tmp/admin_access.log  # ログを保存するファイル
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }  # 9901番ポートでlisten

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 50000 }  # 50000番ポートでlisten
    filter_chains:  # リクエストのフィルタリングの設定
    - filters:
      - name: envoy.filters.network.http_connection_manager  # HTTP接続用に設計された組み込みフィルター
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http  # 接続マネージャの統計を発行する時に使用する人間が読める形式のprefix
          access_log:
            - name: envoy.access_loggers.file
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: "/dev/stdout"  # ログは標準出力
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]  # virtual_hostのドメイン
              routes:
              - match: { prefix: "/" }  # "/"がリクエストのルートと一致
                route:
                  cluster: libc_to_manage_service
                  max_grpc_timeout: 120s  # 最大許容タイムアウト, 0sは無限大
              cors:
                allow_origin_string_match:  # 許可されたorigin
                  - prefix: "*"
                allow_methods: GET, PUT, DELETE, POST, OPTIONS
                allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                max_age: "1728000"  # access-control-max-age headerを指定
                expose_headers: custom-header-1,grpc-status,grpc-message # access-control-expose-headers headerを指定
          http_filters:
          - name: envoy.filters.http.grpc_web  # gRPC-Webクライアントを準拠したgRPCサーバーにブリッジできるようにするフィルター
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: ["h2"]
            tls_certificates:
              - certificate_chain:
                  filename: /certificate/Server.pem
                private_key:
                  filename: /certificate/Server.key
  - name: listener_1
    address:
      socket_address: { address: 0.0.0.0, port_value:  50010}  # 50010番ポートでlisten
    filter_chains:  # リクエストのフィルタリングの設定
    - filters:
      - name: envoy.filters.network.http_connection_manager  # HTTP接続用に設計された組み込みフィルター
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http  # 接続マネージャの統計を発行する時に使用する人間が読める形式のprefix
          access_log:
            - name: envoy.access_loggers.file
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: "/dev/stdout"  # ログは標準出力
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]  # virtual_hostのドメイン
              routes:
              - match: { prefix: "/" }  # "/"がリクエストのルートと一致
                route:
                  cluster: manage_to_manage_service
                  max_grpc_timeout: 120s  # 最大許容タイムアウト, 0sは無限大
          http_filters:
          - name: envoy.filters.http.router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            alpn_protocols: ["h2"]
            tls_certificates:
              - certificate_chain:
                  filename: /certificate/Server.pem
                private_key:
                  filename: /certificate/Server.key
  clusters:  # リクエストがフィルタに一致するとclusterに渡される
  - name: libc_to_manage_service
    connect_timeout: 1000s  # クラスター内のホストへのネットワーク接続のタイムアウト
    type: logical_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    dns_lookup_family: V4_ONLY
    upstream_connection_options:
      tcp_keepalive:
        keepalive_time: 300
    load_assignment:
      cluster_name: cluster_0
      endpoints:  # 中継先のエンドポイントの設定
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 10.0.1.10
                    port_value: 50011
  - name: manage_to_manage_service
    connect_timeout: 1000s  # クラスター内のホストへのネットワーク接続のタイムアウト
    type: logical_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    dns_lookup_family: V4_ONLY
    upstream_connection_options:
      tcp_keepalive:
        keepalive_time: 300
    load_assignment:
      cluster_name: cluster_0
      endpoints:  # 中継先のエンドポイントの設定
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 10.0.1.10
                    port_value: 51011
