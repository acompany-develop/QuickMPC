// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: manage_to_manage.proto

package manage_to_manage_container

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageToManageClient is the client API for ManageToManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageToManageClient interface {
	DeleteShares(ctx context.Context, in *DeleteSharesRequest, opts ...grpc.CallOption) (*DeleteSharesResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	CreateStatusFile(ctx context.Context, in *CreateStatusFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteStatusFile(ctx context.Context, in *DeleteStatusFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type manageToManageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageToManageClient(cc grpc.ClientConnInterface) ManageToManageClient {
	return &manageToManageClient{cc}
}

func (c *manageToManageClient) DeleteShares(ctx context.Context, in *DeleteSharesRequest, opts ...grpc.CallOption) (*DeleteSharesResponse, error) {
	out := new(DeleteSharesResponse)
	err := c.cc.Invoke(ctx, "/managetomanage.ManageToManage/DeleteShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageToManageClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/managetomanage.ManageToManage/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageToManageClient) CreateStatusFile(ctx context.Context, in *CreateStatusFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/managetomanage.ManageToManage/CreateStatusFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageToManageClient) DeleteStatusFile(ctx context.Context, in *DeleteStatusFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/managetomanage.ManageToManage/DeleteStatusFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageToManageServer is the server API for ManageToManage service.
// All implementations must embed UnimplementedManageToManageServer
// for forward compatibility
type ManageToManageServer interface {
	DeleteShares(context.Context, *DeleteSharesRequest) (*DeleteSharesResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	CreateStatusFile(context.Context, *CreateStatusFileRequest) (*emptypb.Empty, error)
	DeleteStatusFile(context.Context, *DeleteStatusFileRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedManageToManageServer()
}

// UnimplementedManageToManageServer must be embedded to have forward compatible implementations.
type UnimplementedManageToManageServer struct {
}

func (UnimplementedManageToManageServer) DeleteShares(context.Context, *DeleteSharesRequest) (*DeleteSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShares not implemented")
}
func (UnimplementedManageToManageServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedManageToManageServer) CreateStatusFile(context.Context, *CreateStatusFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatusFile not implemented")
}
func (UnimplementedManageToManageServer) DeleteStatusFile(context.Context, *DeleteStatusFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatusFile not implemented")
}
func (UnimplementedManageToManageServer) mustEmbedUnimplementedManageToManageServer() {}

// UnsafeManageToManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageToManageServer will
// result in compilation errors.
type UnsafeManageToManageServer interface {
	mustEmbedUnimplementedManageToManageServer()
}

func RegisterManageToManageServer(s grpc.ServiceRegistrar, srv ManageToManageServer) {
	s.RegisterService(&ManageToManage_ServiceDesc, srv)
}

func _ManageToManage_DeleteShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageToManageServer).DeleteShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managetomanage.ManageToManage/DeleteShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageToManageServer).DeleteShares(ctx, req.(*DeleteSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageToManage_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageToManageServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managetomanage.ManageToManage/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageToManageServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageToManage_CreateStatusFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageToManageServer).CreateStatusFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managetomanage.ManageToManage/CreateStatusFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageToManageServer).CreateStatusFile(ctx, req.(*CreateStatusFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageToManage_DeleteStatusFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageToManageServer).DeleteStatusFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managetomanage.ManageToManage/DeleteStatusFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageToManageServer).DeleteStatusFile(ctx, req.(*DeleteStatusFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageToManage_ServiceDesc is the grpc.ServiceDesc for ManageToManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageToManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "managetomanage.ManageToManage",
	HandlerType: (*ManageToManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteShares",
			Handler:    _ManageToManage_DeleteShares_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _ManageToManage_Sync_Handler,
		},
		{
			MethodName: "CreateStatusFile",
			Handler:    _ManageToManage_CreateStatusFile_Handler,
		},
		{
			MethodName: "DeleteStatusFile",
			Handler:    _ManageToManage_DeleteStatusFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage_to_manage.proto",
}
